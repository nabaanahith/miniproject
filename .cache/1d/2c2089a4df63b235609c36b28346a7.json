{"id":"node_modules/ui-box/lib/enhance-props.js","dependencies":[{"name":"C:\\Users\\nabaa96\\Desktop\\fikra\\miniprojectcc\\package.json","includedInParent":true,"mtime":1546179281259},{"name":"C:\\Users\\nabaa96\\Desktop\\fikra\\miniprojectcc\\node_modules\\ui-box\\package.json","includedInParent":true,"mtime":1543586358604},{"name":"./enhancers","loc":{"line":11,"column":25},"parent":"C:\\Users\\nabaa96\\Desktop\\fikra\\miniprojectcc\\node_modules\\ui-box\\lib\\enhance-props.js","resolved":"C:\\Users\\nabaa96\\Desktop\\fikra\\miniprojectcc\\node_modules\\ui-box\\lib\\enhancers\\index.js"},{"name":"./expand-aliases","loc":{"line":13,"column":29},"parent":"C:\\Users\\nabaa96\\Desktop\\fikra\\miniprojectcc\\node_modules\\ui-box\\lib\\enhance-props.js","resolved":"C:\\Users\\nabaa96\\Desktop\\fikra\\miniprojectcc\\node_modules\\ui-box\\lib\\expand-aliases.js"},{"name":"./styles","loc":{"line":17,"column":22},"parent":"C:\\Users\\nabaa96\\Desktop\\fikra\\miniprojectcc\\node_modules\\ui-box\\lib\\enhance-props.js","resolved":"C:\\Users\\nabaa96\\Desktop\\fikra\\miniprojectcc\\node_modules\\ui-box\\lib\\styles.js"},{"name":"./cache","loc":{"line":21,"column":21},"parent":"C:\\Users\\nabaa96\\Desktop\\fikra\\miniprojectcc\\node_modules\\ui-box\\lib\\enhance-props.js","resolved":"C:\\Users\\nabaa96\\Desktop\\fikra\\miniprojectcc\\node_modules\\ui-box\\lib\\cache.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.default = enhanceProps;\n\nvar _enhancers = require('./enhancers');\n\nvar _expandAliases = require('./expand-aliases');\n\nvar _expandAliases2 = _interopRequireDefault(_expandAliases);\n\nvar _styles = require('./styles');\n\nvar styles = _interopRequireWildcard(_styles);\n\nvar _cache = require('./cache');\n\nvar cache = _interopRequireWildcard(_cache);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Converts the CSS props to class names and inserts the styles.\n */\nfunction enhanceProps(rawProps) {\n  var propsMap = (0, _expandAliases2.default)(rawProps);\n  var enhancedProps = {};\n  var className = rawProps.className || '';\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = propsMap[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _ref = _step.value;\n\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      var propName = _ref2[0];\n      var propValue = _ref2[1];\n\n      var cachedClassName = cache.get(propName, propValue);\n      if (cachedClassName) {\n        className = className + ' ' + cachedClassName;\n        continue;\n      }\n\n      var enhancer = _enhancers.propEnhancers[propName];\n      // Skip false boolean enhancers. e.g: `clearfix={false}`\n      // Also allows omitting props via overriding with `null` (i.e: neutralising props)\n      if (enhancer && (propValue === null || propValue === undefined || propValue === false)) {\n        continue;\n      } else if (!enhancer) {\n        // Pass through native props. e.g: disabled, value, type\n        enhancedProps[propName] = propValue;\n        continue;\n      }\n\n      var newCss = enhancer(propValue);\n      // Allow enhancers to return null for invalid values\n      if (newCss) {\n        styles.add(newCss.styles);\n        cache.set(propName, propValue, newCss.className);\n        className = className + ' ' + newCss.className;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  className = className.trim();\n\n  return [className, enhancedProps];\n}\n","map":{"version":3,"sources":["../src/enhance-props.js"],"names":["enhanceProps","styles","cache","rawProps","propsMap","enhancedProps","className","propName","propValue","cachedClassName","get","enhancer","propEnhancers","undefined","newCss","add","set","trim"],"mappings":";;;;;;;;kBAQwBA,Y;;AARxB;;AACA;;;;AACA;;IAAYC,M;;AACZ;;IAAYC,K;;;;;;AAEZ;;;AAGe,SAASF,YAAT,CAAsBG,QAAtB,EAAgC;AAC7C,MAAMC,WAAW,6BAAcD,QAAd,CAAjB;AACA,MAAME,gBAAgB,EAAtB;AACA,MAAIC,YAAYH,SAASG,SAAT,IAAsB,EAAtC;;AAH6C;AAAA;AAAA;;AAAA;AAK7C,yBAAoCF,QAApC,8HAA8C;AAAA;;AAAA;;AAAA,UAAlCG,QAAkC;AAAA,UAAxBC,SAAwB;;AAC5C,UAAMC,kBAAkBP,MAAMQ,GAAN,CAAUH,QAAV,EAAoBC,SAApB,CAAxB;AACA,UAAIC,eAAJ,EAAqB;AACnBH,oBAAeA,SAAf,SAA4BG,eAA5B;AACA;AACD;;AAED,UAAME,WAAWC,yBAAcL,QAAd,CAAjB;AACA;AACA;AACA,UACEI,aACCH,cAAc,IAAd,IAAsBA,cAAcK,SAApC,IAAiDL,cAAc,KADhE,CADF,EAGE;AACA;AACD,OALD,MAKO,IAAI,CAACG,QAAL,EAAe;AACpB;AACAN,sBAAcE,QAAd,IAA0BC,SAA1B;AACA;AACD;;AAED,UAAMM,SAASH,SAASH,SAAT,CAAf;AACA;AACA,UAAIM,MAAJ,EAAY;AACVb,eAAOc,GAAP,CAAWD,OAAOb,MAAlB;AACAC,cAAMc,GAAN,CAAUT,QAAV,EAAoBC,SAApB,EAA+BM,OAAOR,SAAtC;AACAA,oBAAeA,SAAf,SAA4BQ,OAAOR,SAAnC;AACD;AACF;AAjC4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmC7CA,cAAYA,UAAUW,IAAV,EAAZ;;AAEA,SAAO,CAACX,SAAD,EAAYD,aAAZ,CAAP;AACD","file":"enhance-props.js","sourcesContent":["import {propEnhancers} from './enhancers'\nimport expandAliases from './expand-aliases'\nimport * as styles from './styles'\nimport * as cache from './cache'\n\n/**\n * Converts the CSS props to class names and inserts the styles.\n */\nexport default function enhanceProps(rawProps) {\n  const propsMap = expandAliases(rawProps)\n  const enhancedProps = {}\n  let className = rawProps.className || ''\n\n  for (const [propName, propValue] of propsMap) {\n    const cachedClassName = cache.get(propName, propValue)\n    if (cachedClassName) {\n      className = `${className} ${cachedClassName}`\n      continue\n    }\n\n    const enhancer = propEnhancers[propName]\n    // Skip false boolean enhancers. e.g: `clearfix={false}`\n    // Also allows omitting props via overriding with `null` (i.e: neutralising props)\n    if (\n      enhancer &&\n      (propValue === null || propValue === undefined || propValue === false)\n    ) {\n      continue\n    } else if (!enhancer) {\n      // Pass through native props. e.g: disabled, value, type\n      enhancedProps[propName] = propValue\n      continue\n    }\n\n    const newCss = enhancer(propValue)\n    // Allow enhancers to return null for invalid values\n    if (newCss) {\n      styles.add(newCss.styles)\n      cache.set(propName, propValue, newCss.className)\n      className = `${className} ${newCss.className}`\n    }\n  }\n\n  className = className.trim()\n\n  return [className, enhancedProps]\n}\n"]}},"hash":"1051cf3a28444dc8ceadd8f8bc4e3012","cacheData":{"env":{}}}