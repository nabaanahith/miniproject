{"id":"node_modules/dfa/index.js","dependencies":[{"name":"C:\\Users\\nabaa96\\Desktop\\miniproject\\node_modules\\dfa\\index.js.map","includedInParent":true,"mtime":1494565489000},{"name":"C:\\Users\\nabaa96\\Desktop\\miniproject\\package.json","includedInParent":true,"mtime":1543404183975},{"name":"C:\\Users\\nabaa96\\Desktop\\miniproject\\node_modules\\dfa\\package.json","includedInParent":true,"mtime":1543360451600},{"name":"babel-runtime/helpers/slicedToArray","loc":{"line":5,"column":45},"parent":"C:\\Users\\nabaa96\\Desktop\\miniproject\\node_modules\\dfa\\index.js","resolved":"C:\\Users\\nabaa96\\Desktop\\miniproject\\node_modules\\babel-runtime\\helpers\\slicedToArray.js"},{"name":"babel-runtime/core-js/get-iterator","loc":{"line":6,"column":43},"parent":"C:\\Users\\nabaa96\\Desktop\\miniproject\\node_modules\\dfa\\index.js","resolved":"C:\\Users\\nabaa96\\Desktop\\miniproject\\node_modules\\babel-runtime\\core-js\\get-iterator.js"},{"name":"babel-runtime/helpers/defineProperty","loc":{"line":7,"column":46},"parent":"C:\\Users\\nabaa96\\Desktop\\miniproject\\node_modules\\dfa\\index.js","resolved":"C:\\Users\\nabaa96\\Desktop\\miniproject\\node_modules\\babel-runtime\\helpers\\defineProperty.js"},{"name":"babel-runtime/regenerator","loc":{"line":8,"column":50},"parent":"C:\\Users\\nabaa96\\Desktop\\miniproject\\node_modules\\dfa\\index.js","resolved":"C:\\Users\\nabaa96\\Desktop\\miniproject\\node_modules\\babel-runtime\\regenerator\\index.js"},{"name":"babel-runtime/core-js/symbol/iterator","loc":{"line":9,"column":47},"parent":"C:\\Users\\nabaa96\\Desktop\\miniproject\\node_modules\\dfa\\index.js","resolved":"C:\\Users\\nabaa96\\Desktop\\miniproject\\node_modules\\babel-runtime\\core-js\\symbol\\iterator.js"},{"name":"babel-runtime/helpers/classCallCheck","loc":{"line":10,"column":46},"parent":"C:\\Users\\nabaa96\\Desktop\\miniproject\\node_modules\\dfa\\index.js","resolved":"C:\\Users\\nabaa96\\Desktop\\miniproject\\node_modules\\babel-runtime\\helpers\\classCallCheck.js"},{"name":"babel-runtime/helpers/createClass","loc":{"line":11,"column":43},"parent":"C:\\Users\\nabaa96\\Desktop\\miniproject\\node_modules\\dfa\\index.js","resolved":"C:\\Users\\nabaa96\\Desktop\\miniproject\\node_modules\\babel-runtime\\helpers\\createClass.js"}],"generated":{"js":"'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar _slicedToArray = _interopDefault(require('babel-runtime/helpers/slicedToArray'));\nvar _getIterator = _interopDefault(require('babel-runtime/core-js/get-iterator'));\nvar _defineProperty = _interopDefault(require('babel-runtime/helpers/defineProperty'));\nvar _regeneratorRuntime = _interopDefault(require('babel-runtime/regenerator'));\nvar _Symbol$iterator = _interopDefault(require('babel-runtime/core-js/symbol/iterator'));\nvar _classCallCheck = _interopDefault(require('babel-runtime/helpers/classCallCheck'));\nvar _createClass = _interopDefault(require('babel-runtime/helpers/createClass'));\n\nvar INITIAL_STATE = 1;\nvar FAIL_STATE = 0;\n\n/**\n * A StateMachine represents a deterministic finite automaton.\n * It can perform matches over a sequence of values, similar to a regular expression.\n */\n\nvar StateMachine = function () {\n  function StateMachine(dfa) {\n    _classCallCheck(this, StateMachine);\n\n    this.stateTable = dfa.stateTable;\n    this.accepting = dfa.accepting;\n    this.tags = dfa.tags;\n  }\n\n  /**\n   * Returns an iterable object that yields pattern matches over the input sequence.\n   * Matches are of the form [startIndex, endIndex, tags].\n   */\n\n\n  _createClass(StateMachine, [{\n    key: 'match',\n    value: function match(str) {\n      var self = this;\n      return _defineProperty({}, _Symbol$iterator, _regeneratorRuntime.mark(function _callee() {\n        var state, startRun, lastAccepting, lastState, p, c;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                state = INITIAL_STATE;\n                startRun = null;\n                lastAccepting = null;\n                lastState = null;\n                p = 0;\n\n              case 5:\n                if (!(p < str.length)) {\n                  _context.next = 21;\n                  break;\n                }\n\n                c = str[p];\n\n\n                lastState = state;\n                state = self.stateTable[state][c];\n\n                if (!(state === FAIL_STATE)) {\n                  _context.next = 15;\n                  break;\n                }\n\n                if (!(startRun != null && lastAccepting != null && lastAccepting >= startRun)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                _context.next = 13;\n                return [startRun, lastAccepting, self.tags[lastState]];\n\n              case 13:\n\n                // reset the state as if we started over from the initial state\n                state = self.stateTable[INITIAL_STATE][c];\n                startRun = null;\n\n              case 15:\n\n                // start a run if not in the failure state\n                if (state !== FAIL_STATE && startRun == null) {\n                  startRun = p;\n                }\n\n                // if accepting, mark the potential match end\n                if (self.accepting[state]) {\n                  lastAccepting = p;\n                }\n\n                // reset the state to the initial state if we get into the failure state\n                if (state === FAIL_STATE) {\n                  state = INITIAL_STATE;\n                }\n\n              case 18:\n                p++;\n                _context.next = 5;\n                break;\n\n              case 21:\n                if (!(startRun != null && lastAccepting != null && lastAccepting >= startRun)) {\n                  _context.next = 24;\n                  break;\n                }\n\n                _context.next = 24;\n                return [startRun, lastAccepting, self.tags[state]];\n\n              case 24:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n\n    /**\n     * For each match over the input sequence, action functions matching\n     * the tag definitions in the input pattern are called with the startIndex,\n     * endIndex, and sub-match sequence.\n     */\n\n  }, {\n    key: 'apply',\n    value: function apply(str, actions) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(this.match(str)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = _slicedToArray(_step.value, 3);\n\n          var start = _step$value[0];\n          var end = _step$value[1];\n          var tags = _step$value[2];\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = _getIterator(tags), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var tag = _step2.value;\n\n              if (typeof actions[tag] === 'function') {\n                actions[tag](start, end, str.slice(start, end + 1));\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }]);\n\n  return StateMachine;\n}();\n\nmodule.exports = StateMachine;\n\n","map":{"version":3,"file":null,"sources":["src/StateMachine.js"],"sourcesContent":["const INITIAL_STATE = 1;\nconst FAIL_STATE = 0;\n\n/**\n * A StateMachine represents a deterministic finite automaton.\n * It can perform matches over a sequence of values, similar to a regular expression.\n */\nexport default class StateMachine {\n  constructor(dfa) {\n    this.stateTable = dfa.stateTable;\n    this.accepting = dfa.accepting;\n    this.tags = dfa.tags;\n  }\n\n  /**\n   * Returns an iterable object that yields pattern matches over the input sequence.\n   * Matches are of the form [startIndex, endIndex, tags].\n   */\n  match(str) {\n    let self = this;\n    return {\n      *[Symbol.iterator]() {\n        let state = INITIAL_STATE;\n        let startRun = null;\n        let lastAccepting = null;\n        let lastState = null;\n\n        for (let p = 0; p < str.length; p++) {\n          let c = str[p];\n\n          lastState = state;\n          state = self.stateTable[state][c];\n\n          if (state === FAIL_STATE) {\n            // yield the last match if any\n            if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {\n              yield [startRun, lastAccepting, self.tags[lastState]];\n            }\n\n            // reset the state as if we started over from the initial state\n            state = self.stateTable[INITIAL_STATE][c];\n            startRun = null;\n          }\n\n          // start a run if not in the failure state\n          if (state !== FAIL_STATE && startRun == null) {\n            startRun = p;\n          }\n\n          // if accepting, mark the potential match end\n          if (self.accepting[state]) {\n            lastAccepting = p;\n          }\n\n          // reset the state to the initial state if we get into the failure state\n          if (state === FAIL_STATE) {\n            state = INITIAL_STATE;\n          }\n        }\n\n        // yield the last match if any\n        if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {\n          yield [startRun, lastAccepting, self.tags[state]];\n        }\n      }\n    };\n  }\n\n  /**\n   * For each match over the input sequence, action functions matching\n   * the tag definitions in the input pattern are called with the startIndex,\n   * endIndex, and sub-match sequence.\n   */\n  apply(str, actions) {\n    for (let [start, end, tags] of this.match(str)) {\n      for (let tag of tags) {\n        if (typeof actions[tag] === 'function') {\n          actions[tag](start, end, str.slice(start, end + 1));\n        }\n      }\n    }\n  }\n}\n"],"names":["INITIAL_STATE","FAIL_STATE","StateMachine","dfa","stateTable","accepting","tags","str","self","p","length","state","c","startRun","lastAccepting","lastState","actions","match","start","end","tag","slice"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,gBAAgB,CAAtB;AACA,IAAMC,aAAa,CAAnB;;;;;;;IAMqBC;wBACPC,GAAZ,EAAiB;;;SACVC,UAAL,GAAkBD,IAAIC,UAAtB;SACKC,SAAL,GAAiBF,IAAIE,SAArB;SACKC,IAAL,GAAYH,IAAIG,IAAhB;;;;;;;;;;;0BAOIC,KAAK;UACLC,OAAO,IAAX;;;;;;;qBACA,GAEgBR,aAFhB;wBAAA,GAGmB,IAHnB;6BAAA,GAIwB,IAJxB;yBAAA,GAKoB,IALpB;iBAAA,GAOiB,CAPjB;;;sBAOoBS,IAAIF,IAAIG,MAP5B;;;;;iBAAA,GAQcH,IAAIE,CAAJ,CARd;;;4BAUkBE,KAAZ;wBACQH,KAAKJ,UAAL,CAAgBO,KAAhB,EAAuBC,CAAvB,CAAR;;sBAEID,UAAUV,UAbpB;;;;;sBAeYY,YAAY,IAAZ,IAAoBC,iBAAiB,IAArC,IAA6CA,iBAAiBD,QAf1E;;;;;;uBAgBgB,CAACA,QAAD,EAAWC,aAAX,EAA0BN,KAAKF,IAAL,CAAUS,SAAV,CAA1B,CAhBhB;;;;;wBAoBgBP,KAAKJ,UAAL,CAAgBJ,aAAhB,EAA+BY,CAA/B,CAAR;2BACW,IAAX;;;;;oBAIED,UAAUV,UAAV,IAAwBY,YAAY,IAAxC,EAA8C;6BACjCJ,CAAX;;;;oBAIED,KAAKH,SAAL,CAAeM,KAAf,CAAJ,EAA2B;kCACTF,CAAhB;;;;oBAIEE,UAAUV,UAAd,EAA0B;0BAChBD,aAAR;;;;mBApCR;;;;;sBAyCQa,YAAY,IAAZ,IAAoBC,iBAAiB,IAArC,IAA6CA,iBAAiBD,QAzCtE;;;;;;uBA0CY,CAACA,QAAD,EAAWC,aAAX,EAA0BN,KAAKF,IAAL,CAAUK,KAAV,CAA1B,CA1CZ;;;;;;;;;;;;;;;;;;;0BAqDIJ,KAAKS,SAAS;;;;;;0CACa,KAAKC,KAAL,CAAWV,GAAX,CAA/B,4GAAgD;;;cAAtCW,KAAsC;cAA/BC,GAA+B;cAA1Bb,IAA0B;;;;;;+CAC9BA,IAAhB,iHAAsB;kBAAbc,GAAa;;kBAChB,OAAOJ,QAAQI,GAAR,CAAP,KAAwB,UAA5B,EAAwC;wBAC9BA,GAAR,EAAaF,KAAb,EAAoBC,GAApB,EAAyBZ,IAAIc,KAAJ,CAAUH,KAAV,EAAiBC,MAAM,CAAvB,CAAzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}},"hash":"f3884bc7374b01e3f5472444c22e9dd1","cacheData":{"env":{}}}