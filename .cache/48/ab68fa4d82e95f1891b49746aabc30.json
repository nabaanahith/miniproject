{"id":"node_modules/ui-box/lib/prefixer.js","dependencies":[{"name":"C:\\Users\\nabaa96\\Desktop\\miniproject\\package.json","includedInParent":true,"mtime":1545918419085},{"name":"C:\\Users\\nabaa96\\Desktop\\miniproject\\node_modules\\ui-box\\package.json","includedInParent":true,"mtime":1543586358604},{"name":"inline-style-prefixer/static","loc":{"line":8,"column":22},"parent":"C:\\Users\\nabaa96\\Desktop\\miniproject\\node_modules\\ui-box\\lib\\prefixer.js","resolved":"C:\\Users\\nabaa96\\Desktop\\miniproject\\node_modules\\ui-box\\node_modules\\inline-style-prefixer\\static\\index.js"},{"name":"./utils/decamelize","loc":{"line":12,"column":26},"parent":"C:\\Users\\nabaa96\\Desktop\\miniproject\\node_modules\\ui-box\\lib\\prefixer.js","resolved":"C:\\Users\\nabaa96\\Desktop\\miniproject\\node_modules\\ui-box\\lib\\utils\\decamelize.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = prefixer;\n\nvar _static = require('inline-style-prefixer/static');\n\nvar _static2 = _interopRequireDefault(_static);\n\nvar _decamelize = require('./utils/decamelize');\n\nvar _decamelize2 = _interopRequireDefault(_decamelize);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar prefixRegex = /^(Webkit|ms|Moz|O)/;\n\n/**\n * Adds vendor prefixes to properties and values.\n */\nfunction prefixer(property, value) {\n  var rules = (0, _static2.default)(_defineProperty({}, property, value));\n  var rulesArray = [];\n  var propertyNames = Object.keys(rules);\n\n  // Convert rules object to an array\n  for (var i = 0; i < propertyNames.length; i++) {\n    var propertyName = propertyNames[i];\n    // Add a dash in front of the prefixes\n    var prefixedProp = propertyName.match(prefixRegex) ? '-' + propertyName : propertyName;\n    var prop = (0, _decamelize2.default)(prefixedProp);\n    var values = rules[propertyName];\n\n    // Handle prefixed values\n    if (Array.isArray(values)) {\n      for (var _i = 0; _i < values.length; _i++) {\n        rulesArray.push({ property: prop, value: values[_i] });\n      }\n    } else {\n      rulesArray.push({ property: prop, value: values });\n    }\n  }\n\n  return rulesArray;\n}\n","map":{"version":3,"sources":["../src/prefixer.js"],"names":["prefixer","prefixRegex","property","value","rules","rulesArray","propertyNames","Object","keys","i","length","propertyName","prefixedProp","match","prop","values","Array","isArray","push"],"mappings":";;;;;kBAQwBA,Q;;AARxB;;;;AACA;;;;;;;;AAEA,IAAMC,cAAc,oBAApB;;AAEA;;;AAGe,SAASD,QAAT,CAAkBE,QAAlB,EAA4BC,KAA5B,EAAmC;AAChD,MAAMC,QAAQ,0CAAYF,QAAZ,EAAuBC,KAAvB,EAAd;AACA,MAAME,aAAa,EAAnB;AACA,MAAMC,gBAAgBC,OAAOC,IAAP,CAAYJ,KAAZ,CAAtB;;AAEA;AACA,OAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAIH,cAAcI,MAAlC,EAA0CD,GAA1C,EAA+C;AAC7C,QAAME,eAAeL,cAAcG,CAAd,CAArB;AACA;AACA,QAAMG,eAAeD,aAAaE,KAAb,CAAmBZ,WAAnB,UACbU,YADa,GAEjBA,YAFJ;AAGA,QAAMG,OAAO,0BAAWF,YAAX,CAAb;AACA,QAAMG,SAASX,MAAMO,YAAN,CAAf;;AAEA;AACA,QAAIK,MAAMC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACzB,WAAK,IAAIN,KAAI,CAAb,EAAgBA,KAAIM,OAAOL,MAA3B,EAAmCD,IAAnC,EAAwC;AACtCJ,mBAAWa,IAAX,CAAgB,EAAChB,UAAUY,IAAX,EAAiBX,OAAOY,OAAON,EAAP,CAAxB,EAAhB;AACD;AACF,KAJD,MAIO;AACLJ,iBAAWa,IAAX,CAAgB,EAAChB,UAAUY,IAAX,EAAiBX,OAAOY,MAAxB,EAAhB;AACD;AACF;;AAED,SAAOV,UAAP;AACD","file":"prefixer.js","sourcesContent":["import prefixAll from 'inline-style-prefixer/static'\nimport decamelize from './utils/decamelize'\n\nconst prefixRegex = /^(Webkit|ms|Moz|O)/\n\n/**\n * Adds vendor prefixes to properties and values.\n */\nexport default function prefixer(property, value) {\n  const rules = prefixAll({[property]: value})\n  const rulesArray = []\n  const propertyNames = Object.keys(rules)\n\n  // Convert rules object to an array\n  for (let i = 0; i < propertyNames.length; i++) {\n    const propertyName = propertyNames[i]\n    // Add a dash in front of the prefixes\n    const prefixedProp = propertyName.match(prefixRegex)\n      ? `-${propertyName}`\n      : propertyName\n    const prop = decamelize(prefixedProp)\n    const values = rules[propertyName]\n\n    // Handle prefixed values\n    if (Array.isArray(values)) {\n      for (let i = 0; i < values.length; i++) {\n        rulesArray.push({property: prop, value: values[i]})\n      }\n    } else {\n      rulesArray.push({property: prop, value: values})\n    }\n  }\n\n  return rulesArray\n}\n"]}},"hash":"ecb4ae5852bd97ff043717a6846646b0","cacheData":{"env":{}}}