{"id":"node_modules/joi/lib/types/string/uri.js","dependencies":[{"name":"C:\\Users\\nabaa96\\Desktop\\fikra\\miniprojectcc\\package.json","includedInParent":true,"mtime":1545918419085},{"name":"C:\\Users\\nabaa96\\Desktop\\fikra\\miniprojectcc\\node_modules\\joi\\package.json","includedInParent":true,"mtime":1545669307947},{"name":"./rfc3986","loc":{"line":5,"column":24},"parent":"C:\\Users\\nabaa96\\Desktop\\fikra\\miniprojectcc\\node_modules\\joi\\lib\\types\\string\\uri.js","resolved":"C:\\Users\\nabaa96\\Desktop\\fikra\\miniprojectcc\\node_modules\\joi\\lib\\types\\string\\rfc3986.js"}],"generated":{"js":"'use strict';\n\n// Load Modules\n\nconst RFC3986 = require('./rfc3986');\n\n\n// Declare internals\n\nconst internals = {\n    Uri: {\n        createUriRegex: function (optionalScheme, allowRelative, relativeOnly, allowQuerySquareBrackets) {\n\n            let scheme = RFC3986.scheme;\n            let prefix;\n\n            if (relativeOnly) {\n                prefix = '(?:' + RFC3986.relativeRef + ')';\n            }\n            else {\n                // If we were passed a scheme, use it instead of the generic one\n                if (optionalScheme) {\n\n                    // Have to put this in a non-capturing group to handle the OR statements\n                    scheme = '(?:' + optionalScheme + ')';\n                }\n\n                const withScheme = '(?:' + scheme + ':' + RFC3986.hierPart + ')';\n\n                prefix = allowRelative ? '(?:' + withScheme + '|' + RFC3986.relativeRef + ')' : withScheme;\n            }\n\n            /**\n             * URI = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\n             *\n             * OR\n             *\n             * relative-ref = relative-part [ \"?\" query ] [ \"#\" fragment ]\n             */\n            return new RegExp('^' + prefix + '(?:\\\\?' + (allowQuerySquareBrackets ? RFC3986.queryWithSquareBrackets : RFC3986.query) + ')?' + '(?:#' + RFC3986.fragment + ')?$');\n        }\n    }\n};\n\n\nmodule.exports = internals.Uri;\n","map":{"mappings":[{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/joi/lib/types/string/uri.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}}],"sources":{"node_modules/joi/lib/types/string/uri.js":"'use strict';\n\n// Load Modules\n\nconst RFC3986 = require('./rfc3986');\n\n\n// Declare internals\n\nconst internals = {\n    Uri: {\n        createUriRegex: function (optionalScheme, allowRelative, relativeOnly, allowQuerySquareBrackets) {\n\n            let scheme = RFC3986.scheme;\n            let prefix;\n\n            if (relativeOnly) {\n                prefix = '(?:' + RFC3986.relativeRef + ')';\n            }\n            else {\n                // If we were passed a scheme, use it instead of the generic one\n                if (optionalScheme) {\n\n                    // Have to put this in a non-capturing group to handle the OR statements\n                    scheme = '(?:' + optionalScheme + ')';\n                }\n\n                const withScheme = '(?:' + scheme + ':' + RFC3986.hierPart + ')';\n\n                prefix = allowRelative ? '(?:' + withScheme + '|' + RFC3986.relativeRef + ')' : withScheme;\n            }\n\n            /**\n             * URI = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\n             *\n             * OR\n             *\n             * relative-ref = relative-part [ \"?\" query ] [ \"#\" fragment ]\n             */\n            return new RegExp('^' + prefix + '(?:\\\\?' + (allowQuerySquareBrackets ? RFC3986.queryWithSquareBrackets : RFC3986.query) + ')?' + '(?:#' + RFC3986.fragment + ')?$');\n        }\n    }\n};\n\n\nmodule.exports = internals.Uri;\n"},"lineCount":47}},"hash":"03a25fd78ee070fe3d5cbb8c68a80067","cacheData":{"env":{}}}